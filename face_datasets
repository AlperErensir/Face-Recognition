# Import python path.

import sys 
sys.path.append('/usr/local/lib/python3.9/site-packages')

# Import libraries.

import cv2 
import os

#Check the existence of directory path.

def assure_path_exists(path):
    dir = os.path.dirname(path)
    if not os.path.exists(dir):
        os.makedirs(dir)

# Start the webcam.
vid_cam = cv2.VideoCapture(0)

# For detecting the faces in each frame we will use Haarcascade Frontal Face default classifier of OpenCV
face_detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# Set a parameter for detection. 
face_id = 1

# Variable for counting the sample training images.
count = 0

# Checking the existence of path.
assure_path_exists("training_data/")


while(True):

    # Capture each video frame from the webcam.
    _, image_frame = vid_cam.read()

    # Convert each frame to grayscale image.
    gray = cv2.cvtColor(image_frame, cv2.COLOR_BGR2GRAY)

    # Detect faces.
    faces = face_detector.detectMultiScale(gray, 1.3, 5)

    # Detect faces in the frame.
    for (x,y,w,h) in faces:

        # Crop the image frame into a rectangle.
        cv2.rectangle(image_frame, (x,y), (x+w,y+h), (255,0,0), 2)
        
        # Increase the number of sample images by 1 when captured.
        count += 1

        # Save the captured image into the training_data folder.
        cv2.imwrite("training_data/Person." + str(face_id) + '.' + str(count) + ".jpg", gray[y:y+h,x:x+w])

        # Display a rectangle around the detected face.
        cv2.imshow('frame', image_frame)

    # Press 'q' to stop this capturing process.
    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

    # If image taken reaches count number, stop taking video. It can be adjusted.
    elif count>500:
        break

# Terminate video.
vid_cam.release()

# CLose all windows.
cv2.destroyAllWindows()